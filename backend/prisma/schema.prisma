generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  nome       String   @db.VarChar(100)
  email      String   @unique @db.VarChar(150)
  senha      String   @db.Text
  created_at DateTime @default(now())

  @@map("admins")
}

model Temporada {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(100)
  ano       Int
  criada_em DateTime  @default(now())
  fotos     Foto[]
  rankings  Ranking[]
  torneios  Torneio[]

  @@map("temporadas")
}

model Jogador {
  id              Int            @id @default(autoincrement())
  nome            String         @db.VarChar(100)
  email           String?        @unique @db.VarChar(150)
  telefone        String?        @db.VarChar(20)
  apelido         String?        @db.VarChar(50)
  avatar_url      String?        @db.VarChar(255)
  bio             String?        @db.Text
  cidade          String?        @db.VarChar(100)
  data_nascimento DateTime?
  ativo           Boolean        @default(true)
  criado_em       DateTime       @default(now())
  total_torneios  Int            @default(0)
  total_pontos    Int            @default(0)
  melhor_posicao  Int?
  vitorias        Int            @default(0)
  fotos           Foto[]
  participacoes   Participacao[]
  rankings        Ranking[]

  @@map("jogadores")
}

model Torneio {
  id            Int            @id @default(autoincrement())
  id_temporada  Int
  nome          String         @db.VarChar(100)
  data_hora     DateTime
  local         String         @db.VarChar(200)
  observacoes   String?        @db.Text
  ativo         Boolean        @default(true)
  fotos         Foto[]
  participacoes Participacao[]
  temporada     Temporada      @relation(fields: [id_temporada], references: [id], onDelete: Cascade)

  @@index([id_temporada], map: "torneios_id_temporada_fkey")
  @@map("torneios")
}

model Participacao {
  id         Int      @id @default(autoincrement())
  id_torneio Int
  id_jogador Int
  posicao    Int
  pontuacao  Int
  criado_em  DateTime @default(now())
  jogador    Jogador  @relation(fields: [id_jogador], references: [id], onDelete: Cascade)
  torneio    Torneio  @relation(fields: [id_torneio], references: [id], onDelete: Cascade)

  @@unique([id_torneio, id_jogador])
  @@index([id_jogador], map: "participacoes_id_jogador_fkey")
  @@map("participacoes")
}

model Ranking {
  id            Int       @id @default(autoincrement())
  posicao       Int
  pontuacao     Int
  atualizado_em DateTime  @default(now())
  id_jogador    Int
  id_temporada  Int
  jogador       Jogador   @relation(fields: [id_jogador], references: [id], onDelete: Cascade)
  temporada     Temporada @relation(fields: [id_temporada], references: [id], onDelete: Cascade)

  @@unique([id_jogador, id_temporada])
  @@index([id_temporada], map: "ranking_id_temporada_fkey")
  @@map("ranking")
}

model Foto {
  id           Int           @id @default(autoincrement())
  id_torneio   Int?
  id_temporada Int?
  id_jogador   Int?
  imagem_url   String        @db.VarChar(255)
  legenda      String?       @db.VarChar(255)
  data         DateTime      @default(now())
  album        String        @db.VarChar(100)
  categoria    CategoriaFoto @default(TEMPORADA)
  jogador      Jogador?      @relation(fields: [id_jogador], references: [id], onDelete: Cascade)
  temporada    Temporada?    @relation(fields: [id_temporada], references: [id], onDelete: Cascade)
  torneio      Torneio?      @relation(fields: [id_torneio], references: [id], onDelete: Cascade)

  @@index([id_jogador], map: "fotos_id_jogador_fkey")
  @@index([id_temporada], map: "fotos_id_temporada_fkey")
  @@index([id_torneio], map: "fotos_id_torneio_fkey")
  @@map("fotos")
}

enum CategoriaFoto {
  TEMPORADA
  HALL_DA_FAMA
  MELHORES_MOMENTOS
}
